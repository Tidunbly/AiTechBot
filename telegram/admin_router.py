from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command
from aiogram.types import CallbackQuery
from filters_new import *
from main import *
from kyboards import *
from aiogram import F, Router
from config import *
from create_bot import bot, db
from vectore_store_manager import create_vectorstore
import main
from jsonmaker import *
admin_router = Router()



@admin_router.message(CommandStart(), IsAdminFilter())
async def start_admin(msg: Message):
    builder_start = InlineKeyboardBuilder()
    builder_start.row(InlineKeyboardButton(text='–ú–µ–Ω—éüõéÔ∏è', callback_data='button_menu'))

    await msg.answer(
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –∏–ª–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /menu.\n'
        '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ /settings.',
        reply_markup=builder_start.as_markup())


@admin_router.callback_query(F.data == 'button_cancel', IsAdminFilter())
async def cancel_button(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è.', reply_markup=builder_admin.as_markup())
    await call.answer()


@admin_router.message(Command('menu'), IsAdminFilter())
async def help_command(msg: Message):
    await msg.answer('–ë–æ—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã.\n\n'
                     '', reply_markup=builder_menu.as_markup())


@admin_router.callback_query(F.data == 'button_menu', IsAdminFilter())
async def help_button(call: CallbackQuery):
    await call.message.edit_text(
        '–ë–æ—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã.\n\n'
        '', reply_markup=builder_menu.as_markup())
    await call.answer()


@admin_router.callback_query(F.data == 'button_add_doc', IsAdminFilter())
async def add_file_button(call: CallbackQuery, state: FSMContext):
    builder_add_file = InlineKeyboardBuilder()
    builder_add_file.add(InlineKeyboardButton(text='< –ù–∞–∑–∞–¥', callback_data='button_show_files'))

    await call.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ txt.', reply_markup=builder_add_file.as_markup())
    await state.set_state(Answer.waiting_for_doc)


@admin_router.message(Answer.waiting_for_doc, F.document, IsAdminFilter())
async def add_file_handler(msg: Message):
    builder_add_file = InlineKeyboardBuilder()
    builder_add_file.add(InlineKeyboardButton(text='< –ù–∞–∑–∞–¥', callback_data='button_show_files'))

    if msg.document:
        document = msg.document
        doc_id = document.file_id
        doc_name = document.file_name
        file = await bot.get_file(doc_id)
        downloaded_file = await bot.download_file(file.file_path)

        await msg.answer('–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!', reply_markup=builder_add_file.as_markup())
        with open(rf"AiChatBot2\{doc_name}", "wb") as new_file:
            new_file.write(downloaded_file.read())

        json_maker(mainpath, json_file_path)
    else:
        await msg.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –Ω–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                         reply_markup=builder_cancel.as_markup())


def shorten_text(text, max_length=100):
    return text[:max_length] + "..." if len(text) > max_length else text


@admin_router.callback_query(F.data.startswith("page_"), IsAdminFilter())
async def paginate(call: CallbackQuery):
    page = int(call.data.split("_")[1])
    queries = await db.get_unanswered_query()
    chunks = [queries[i:i + 5] for i in range(0, len(queries), 5)]
    await send_query_chunk(call.message, call, chunks, page)
    await call.answer()


@admin_router.callback_query(F.data == 'button_all', IsAdminFilter())
async def all_button(call: CallbackQuery):
    queries = await db.get_unanswered_query()

    if queries:
        chunk_size = 5
        chunks = [queries[i:i + chunk_size] for i in range(0, len(queries), chunk_size)]
        await send_query_chunk(call.message, call, chunks, 0)
    else:
        await call.message.answer('–ù–µ—Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç.')


async def send_query_chunk(msg, call, chunks, page):
    response = f"–°–ø–∏—Å–æ–∫ –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {len(chunks)}):\n\n"
    for query in chunks[page]:
        response += (
            f"ID: {query[0]}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {query[1]}\n"
            f"–ó–∞–ø—Ä–æ—Å: {shorten_text(query[2])}\n"
            f"–û—Ç–≤–µ—Ç: {shorten_text(query[3])}\n"
            f"–õ–æ–∫–∞—Ü–∏—è   : {query[4]}\n"
            f"–°—Ç–∞—Ç—É—Å: {query[5]}\n"
            "------------------------\n"
        )

    builder_page_opened = InlineKeyboardBuilder()
    builder_page_opened.add(
        InlineKeyboardButton(text=f'–í—ã–±—Ä–∞—Ç—å –∑–∞–ø—Ä–æ—Å{emoji.emojize(":writing_hand:")}',
                             callback_data='button_start_answer'))

    if page > 0 or page < len(chunks) - 1:
        row_buttons = []  # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫

        if page > 0:
            row_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"page_{page - 1}"))

        if page < len(chunks) - 1:
            row_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"page_{page + 1}"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
        builder_page_opened.row(*row_buttons)

    builder_page_opened.row(InlineKeyboardButton(text='–†–µ—à—ë–Ω–Ω—ã–µüéâ', callback_data='button_closed'))
    builder_page_opened.row(InlineKeyboardButton(text='< –ù–∞–∑–∞–¥', callback_data='button_menu'))

    await msg.edit_text(response, reply_markup=builder_page_opened.as_markup())
    await call.answer()


@admin_router.callback_query(F.data.startswith("page_second_"), IsAdminFilter())
async def paginate(call: CallbackQuery):
    page = int(call.data.split("_")[1])
    queries = await db.get_unanswered_query()
    chunks = [queries[i:i + 5] for i in range(0, len(queries), 5)]
    await send_query_chunk(call.message, call, chunks, page)
    await call.answer()


@admin_router.callback_query(F.data == 'button_closed', IsAdminFilter())
async def closed_button(call: CallbackQuery):
    queries = await db.get_answered_query()

    if queries:
        chunk_size = 5
        chunks = [queries[i:i + chunk_size] for i in range(0, len(queries), chunk_size)]
        await send_query_closed_chunk(call.message, call, chunks, 0)
    else:
        await call.message.answer('–†–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç.')


async def send_query_closed_chunk(msg, call, chunks, page):
    response = f"–°–ø–∏—Å–æ–∫ —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {len(chunks)}):\n\n"
    for query in chunks[page]:
        response += (
            f"ID: {query[0]}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {query[1]}\n"
            f"–ó–∞–ø—Ä–æ—Å: {shorten_text(query[2])}\n"
            f"–û—Ç–≤–µ—Ç: {shorten_text(query[3])}\n"
            f"–õ–æ–∫–∞—Ü–∏—è   : {query[4]}\n"
            f"–°—Ç–∞—Ç—É—Å: {query[5]}\n"
            "------------------------\n"
        )

    builder_page_closed = InlineKeyboardBuilder()

    if page > 0 or page < len(chunks) - 1:
        row_buttons = []

        if page > 0:
            row_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"page_{page - 1}"))

        if page < len(chunks) - 1:
            row_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"page_{page + 1}"))

        builder_page_closed.row(*row_buttons)

    builder_page_closed.row(InlineKeyboardButton(text='–ù–µ —Ä–µ—à—ë–Ω–Ω—ã–µ‚è≥', callback_data='button_all'))
    builder_page_closed.row(InlineKeyboardButton(text='< –ù–∞–∑–∞–¥', callback_data='button_menu'))

    await msg.edit_text(response, reply_markup=builder_page_closed.as_markup())
    await call.answer()


@admin_router.callback_query(F.data == 'button_start_answer', IsAdminFilter())
async def start_answer_handler(call: CallbackQuery, state: FSMContext):
    builder_start_answer = InlineKeyboardBuilder()
    builder_start_answer.add(InlineKeyboardButton(text='< –ù–∞–∑–∞–¥', callback_data='button_all'))
    await call.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ id –∑–∞–ø—Ä–æ—Å–∞.', reply_markup=builder_start_answer.as_markup())
    await state.set_state(Answer.waiting_for_id)
    await call.answer()


@admin_router.message(Answer.waiting_for_id, IsAdminFilter())
async def waiting_for_id_handler(msg: Message, state: FSMContext):
    id = msg.text
    queries = await db.get_query_by_id(id)
    query = queries

    if queries and query[5] != '–†–µ—à–∞–µ—Ç—Å—è':
        builder_waiting_for_id = InlineKeyboardBuilder()
        builder_waiting_for_id.add(
            InlineKeyboardButton(text=f'–û—Ç–≤–µ—Ç–∏—Ç—å{emoji.emojize(":writing_hand:")}', callback_data='button_answer'))
        builder_waiting_for_id.add(InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å‚úÖ', callback_data='button_close'))
        builder_waiting_for_id.row(InlineKeyboardButton(text='< –ù–∞–∑–∞–¥', callback_data='button_all'))

        try:
            await msg.answer(f"–ó–∞–ø—Ä–æ—Å –æ—Ç: {query[1]}\n"
                             f"–õ–æ–∫–∞—Ü–∏—è: {query[4]}\n"
                             f"–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞: {query[2]}\n"
                             f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {query[3]}", reply_markup=builder_waiting_for_id.as_markup())

            await state.update_data(query_id=query[0], user_id=query[1])
        except Exception as e:
            await msg.answer('–æ—à–∏–±–∫–∞')
    else:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π id –∏–ª–∏ –∑–∞–ø—Ä–æ—Å —É–∂–µ —Ä–µ—à–∞–µ—Ç—Å—è!")


@admin_router.callback_query(F.data == 'button_answer', IsAdminFilter())
async def answer_button(call: CallbackQuery, state: FSMContext):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.')

    data = await state.get_data()
    query_id = data.get('query_id')
    user_id = data.get('user_id')
    admin_id = call.from_user.id

    await state.set_state(Answer.waiting_for_answer)
    await db.update_query_status(query_id, '–†–µ—à–∞–µ—Ç—Å—è', admin_id)

    await bot.send_message(user_id, '–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.')
    await call.answer()


@admin_router.message(Answer.waiting_for_answer, IsAdminFilter())
async def answer_process(msg: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('user_id')

    if not user_id:
        await msg.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    if msg.text:  # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç
        text = msg.text
        await state.update_data(admin_text=text)

    await msg.answer("–û—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", reply_markup=builder_answering.as_markup())
    await bot.send_message(chat_id=user_id, text='–°–æ—Ç—Ä—É–¥–Ω–∏–∫: ')
    await bot.copy_message(chat_id=user_id, from_chat_id=msg.chat.id, message_id=msg.message_id)


@admin_router.callback_query(F.data == 'button_close', IsAdminFilter())
async def close_query(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    query_id = data.get('query_id')
    text = data.get('admin_text', '')

    await db.update_query_id(query_id, text, '–†–µ—à—ë–Ω')
    await call.message.answer('–ó–∞–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç.', reply_markup=builder_admin.as_markup())
    user_id = data.get('user_id')

    await bot.send_message(user_id, '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–∞–∫—Ä—ã–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.', reply_markup=builder_user.as_markup())

    await call.answer()
    await state.clear()


# @admin_router.message(Command('delete'), IsAdminFilter())
# async def delete_command(msg: Message):
#     queries = await db.get_all_query()
#     if not queries:
#         await msg.answer('–ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç')
#         return
#
#     try:
#         query_id = int(msg.text.split()[1])
#     except (IndexError, ValueError):
#         await msg.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ id')
#     try:
#         if not any(query[0] == query_id for query in queries):
#             await msg.reply('–ó–∞–ø—Ä–æ—Å–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ—Ç')
#             return
#     except:
#         await msg.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ id')
#
#     await db.delete_query(query_id)
#
#     await msg.reply(f'–ó–∞–ø—Ä–æ—Å —Å id = {query_id} —É–¥–∞–ª–µ–Ω')


@admin_router.callback_query(F.data == 'button_rates', IsAdminFilter())
async def rates_button(call: CallbackQuery):
    rates = await db.get_all_rates()

    page_size = 5
    chunks = [rates[i:i + page_size] for i in range(0, len(rates), page_size)]

    page = 0

    response = f"–°–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {len(chunks)}):\n\n"
    for rate in chunks[page]:
        response += (
            f"ID: {rate[0]}\n"
            f"ID –∑–∞–ø—Ä–æ—Å–∞: {rate[1]}\n"
            f"–ó–∞–ø—Ä–æ—Å: {shorten_text(rate[2])}\n"
            f"–û—Ü–µ–Ω–∫–∞: {rate[3]}\n"
            "------------------------\n"
        )

    builder_page_rate = InlineKeyboardBuilder()

    if page > 0 or page < len(chunks) - 1:
        row_buttons = []

        if page > 0:
            row_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"rate_page_{page - 1}"))

        if page < len(chunks) - 1:
            row_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"rate_page_{page + 1}"))

        builder_page_rate.row(*row_buttons)

    builder_page_rate.row(InlineKeyboardButton(text='< –ù–∞–∑–∞–¥', callback_data='button_menu'))

    await call.message.edit_text(response, reply_markup=builder_page_rate.as_markup())
    await call.answer()


@admin_router.callback_query(F.data.startswith("rate_page_"), IsAdminFilter())
async def handle_rate_pagination(call: CallbackQuery):
    page = int(call.data.split("_")[-1])
    rates = await db.get_all_rates()

    page_size = 5
    chunks = [rates[i:i + page_size] for i in range(0, len(rates), page_size)]

    response = f"–°–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {len(chunks)}):\n\n"
    for rate in chunks[page]:
        response += (
            f"ID: {rate[0]}\n"
            f"ID –∑–∞–ø—Ä–æ—Å–∞: {rate[1]}\n"
            f"–ó–∞–ø—Ä–æ—Å: {shorten_text(rate[2])}\n"
            f"–û—Ü–µ–Ω–∫–∞: {rate[3]}\n"
            "------------------------\n"
        )

    builder_page_rate = InlineKeyboardBuilder()

    if page > 0 or page < len(chunks) - 1:
        row_buttons = []

        if page > 0:
            row_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"rate_page_{page - 1}"))

        if page < len(chunks) - 1:
            row_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"rate_page_{page + 1}"))

        builder_page_rate.row(*row_buttons)

    builder_page_rate.row(InlineKeyboardButton(text='< –ù–∞–∑–∞–¥', callback_data='button_menu'))

    await call.message.edit_text(response, reply_markup=builder_page_rate.as_markup())


async def get_settings_keyboard(admin_id):
    status = await db.get_admin_status(admin_id)
    builder_setting = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    builder_setting.add(InlineKeyboardButton(
        text=f'–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å üîÑ',
        callback_data=f'toggle_status_{admin_id}'
    ))

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    builder_setting.row(InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞‚ûï', callback_data='button_add_admin'))
    builder_setting.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞üóëÔ∏è', callback_data='button_delete_admin'))
    builder_setting.row(InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã üìÇ', callback_data='button_show_files'))
    builder_setting.row(InlineKeyboardButton(text='< –ù–∞–∑–∞–¥', callback_data='button_menu'))

    return builder_setting.as_markup()


@admin_router.message(Command("settings"),IsAdminFilter())
async def settings_command(msg: Message):
    admin_id = msg.from_user.id
    status = await db.get_admin_status(admin_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    status_text = "–∞–∫—Ç–∏–≤–µ–Ω ‚úÖ" if status == "active" else "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω ‚ùå"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await msg.answer(
        f'üë§{admin_id}\n\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {status_text}',
        reply_markup=await get_settings_keyboard(admin_id)
    )


@admin_router.callback_query(F.data == 'button_settings', IsAdminFilter())
async def setting_button(call: CallbackQuery):
    admin_id = call.from_user.id
    status = await db.get_admin_status(admin_id)

    status_text = "–∞–∫—Ç–∏–≤–µ–Ω ‚úÖ" if status == "active" else "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω ‚ùå"
    await call.message.edit_text(
        f'üë§{admin_id}\n\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {status_text}',
        reply_markup=await get_settings_keyboard(admin_id)
    )
    await call.answer()


@admin_router.callback_query(F.data.startswith('toggle_status_'), IsAdminFilter())
async def toggle_status_handler(call: CallbackQuery):
    admin_id = int(call.data.split('_')[-1])  # –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    current_status = await db.get_admin_status(admin_id)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å

    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π
    new_status = "inactive" if current_status == "active" else "active"
    await db.update_admin_status(admin_id, new_status)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å —ç–º–æ–¥–∑–∏
    status_text = "–∞–∫—Ç–∏–≤–µ–Ω ‚úÖ" if new_status == "active" else "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω ‚ùå"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await call.message.edit_text(
        f'üë§{admin_id}\n\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {status_text}',  # –¢–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        reply_markup=await get_settings_keyboard(admin_id)
    )
    await call.answer(f'–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status_text}')


@admin_router.callback_query(F.data == 'button_add_admin', IsAdminFilter())
async def add_admin_button(call: CallbackQuery, state: FSMContext):
    builder_add_admin = InlineKeyboardBuilder()
    builder_add_admin.add(InlineKeyboardButton(text='< –ù–∞–∑–∞–¥', callback_data='button_settings'))

    await call.message.edit_text('–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏.',
                                 reply_markup=builder_add_admin.as_markup())
    await state.set_state(Answer.waiting_for_add_admin)
    await call.answer()


@admin_router.message(Answer.waiting_for_add_admin, IsAdminFilter())
async def add_admin_handler(msg: Message):
    try:

        user_id = msg.forward_from.id
        is_exists = await db.is_admin_exists(user_id)
        if not is_exists:
            await db.add_admin(user_id)
            await msg.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=builder_menu.as_markup())

        else:
            await msg.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é.',
                             reply_markup=builder_cancel.as_markup())

    except Exception as e:
        await msg.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=builder_menu.as_markup())


@admin_router.callback_query(F.data == 'button_delete_admin', IsAdminFilter())
async def delete_admin_button(call: CallbackQuery, state: FSMContext):
    builder_delete_admin = InlineKeyboardBuilder()
    builder_delete_admin.add(InlineKeyboardButton(text='< –ù–∞–∑–∞–¥', callback_data='button_settings'))

    await call.message.edit_text('–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.',
                                 reply_markup=builder_delete_admin.as_markup())
    await state.set_state(Answer.waiting_for_delete_admin)
    await call.answer()


@admin_router.message(Answer.waiting_for_delete_admin, IsAdminFilter())
async def add_admin_handler(msg: Message):
    try:
        user_id = msg.forward_from.id
        is_exists = await db.is_admin_exists(user_id)
        if is_exists:
            await db.delete_admin(user_id)
            await msg.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', reply_markup=builder_menu.as_markup())

        else:
            await msg.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é.',
                             reply_markup=builder_cancel.as_markup())

    except Exception as e:
        await msg.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=builder_menu.as_markup())


@admin_router.callback_query(F.data == 'button_show_files', IsAdminFilter())
async def show_files_button(call: CallbackQuery):
    await paginate_files(call, page=0)


@admin_router.callback_query(F.data.startswith('files_page_'), IsAdminFilter())
async def paginate_files(call: CallbackQuery, page: int = None):
    if page is None:
        try:
            page = int(call.data.split('_')[-1])  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
        except (IndexError, ValueError):
            await call.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data.")
            return

    try:
        with open(json_file_path, "r", encoding="utf-8") as f:
            documents = json.load(f)

        if not documents:
            await call.message.answer("–§–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        page_size = 5
        chunks = [documents[i:i + page_size] for i in range(0, len(documents), page_size)]

        if page >= len(chunks) or page < 0:
            await call.message.answer("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        start_index = page * page_size

        file_list = "\n".join(
            [f"{start_index + i + 1}. {doc['title']}" for i, doc in enumerate(chunks[page])]
        )

        builder_files = InlineKeyboardBuilder()

        builder_files.row(
            InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—éüóëÔ∏è', callback_data='button_delete_doc'),
            InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—éüí°', callback_data='button_add_doc')
        )

        if page > 0 or page < len(chunks) - 1:
            row_buttons_files = []

            if page > 0:
                row_buttons_files.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"files_page_{page - 1}"))

            if page < len(chunks) - 1:
                row_buttons_files.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"files_page_{page + 1}"))

            builder_files.row(*row_buttons_files)

        builder_files.row(InlineKeyboardButton(text=f'< –ù–∞–∑–∞–¥', callback_data='button_settings'))

        # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await call.message.edit_text(
            f"–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {len(chunks)}):\n\n{file_list}",
            reply_markup=builder_files.as_markup()
        )
    except Exception as e:
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")


@admin_router.callback_query(F.data == 'button_delete_doc', IsAdminFilter())
async def delete_file_button(call: CallbackQuery, state: FSMContext):
    builder_delete_file = InlineKeyboardBuilder()
    builder_delete_file.add(InlineKeyboardButton(text='< –ù–∞–∑–∞–¥', callback_data='button_show_files'))

    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=builder_delete_file.as_markup())
    await state.set_state(Answer.waiting_for_file_to_delete)


@admin_router.message(Answer.waiting_for_file_to_delete, F.text, IsAdminFilter())
async def delete_file_handler(msg: Message, state: FSMContext):
    file_name = msg.text.strip()
    builder_delete_file = InlineKeyboardBuilder()
    builder_delete_file.add(InlineKeyboardButton(text='< –ù–∞–∑–∞–¥', callback_data='button_show_files'))

    try:
        # –£–¥–∞–ª—è–µ–º TXT-—Ñ–∞–π–ª
        file_path = os.path.join(mainpath, file_name)
        if os.path.exists(file_path):
            os.remove(file_path)
        else:
            await msg.answer(f"–§–∞–π–ª '{file_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.",
                             reply_markup=builder_delete_file.as_markup())
            return

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ JSON-—Ñ–∞–π–ª–∞
        if os.path.exists(json_file_path):
            with open(json_file_path, "r", encoding="utf-8") as f:
                documents = json.load(f)

            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã, —É–¥–∞–ª—è—è –∑–∞–ø–∏—Å—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            initial_length = len(documents)
            documents = [doc for doc in documents if doc["title"] != file_name]

            if len(documents) < initial_length:
                with open(json_file_path, "w", encoding="utf-8") as f:
                    json.dump(documents, f, ensure_ascii=False, indent=4)
            else:
                await msg.answer(f"–§–∞–π–ª '{file_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JSON.", reply_markup=builder_delete_file.as_markup())
                return

        else:
            await msg.answer("JSON-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=builder_delete_file.as_markup())
            return

        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

        main.vectorstore = create_vectorstore(json_file_path)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ vectorstore_manager

        await msg.answer(f"–§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.",
                         reply_markup=builder_delete_file.as_markup())
        await state.clear()

    except Exception as e:
        await msg.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}", reply_markup=builder_delete_file.as_markup())

# @admin_router.message(Command('kb'), F.chat.func(lambda chat: chat.id == AdminChatId))
# async def keyboard_command(msg: Message):
#     await msg.answer('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–∑–≤–∞–Ω–∞', reply_markup=keyboard)
